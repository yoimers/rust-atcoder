{
  "BSGSable": {
    "prefix": "BSGSable",
    "body": [
      "pub trait BSGSable {",
      "    type T: std::fmt::Debug;",
      "    type K: std::hash::Hash + std::cmp::Eq;",
      "    fn inv(x: &Self::T, mo: u64) -> Self::T;",
      "    fn unit() -> Self::T;",
      "    fn multiply(x: &Self::T, y: &Self::T, mo: u64) -> Self::T;",
      "    fn unique_key_for(x: &Self::T) -> Self::K;",
      "}"
    ]
  },
  "ConvexHullTrick": {
    "prefix": "ConvexHullTrick",
    "body": [
      "#[derive(Clone, Copy)]",
      "struct Line {",
      "    a: i64,",
      "    b: i64,",
      "}",
      "impl Line {",
      "    ///y=ax+b",
      "    pub fn new(a: i64, b: i64) -> Line {",
      "        Line { a: a, b: b }",
      "    }",
      "    pub fn y(&self, x: i64) -> i64 {",
      "        self.a * x + self.b",
      "    }",
      "}",
      "struct ConvexHullTrick {",
      "    lines: Vec<(i64, i64)>,",
      "}",
      "impl ConvexHullTrick {",
      "    pub fn new() -> ConvexHullTrick {",
      "        ConvexHullTrick { lines: vec![] }",
      "    }",
      "    fn check(l1: (i64, i64), l2: (i64, i64), l3: (i64, i64)) -> bool {",
      "        let mut l1 = l1;",
      "        let mut l3 = l3;",
      "        if l1 < l3 {",
      "            std::mem::swap(&mut l1, &mut l3);",
      "        }",
      "        (l3.1 - l2.1) * (l2.0 - l1.0) >= (l2.1 - l1.1) * (l3.0 - l2.0)",
      "    }",
      "    ///add a line f(x)=ax+b",
      "    pub fn add(&mut self, line: Line) {",
      "        let line = (line.a, line.b);",
      "        while self.lines.len() >= 2",
      "            && Self::check(",
      "                self.lines[self.lines.len() - 2],",
      "                self.lines[self.lines.len() - 1],",
      "                line,",
      "            )",
      "        {",
      "            self.lines.pop();",
      "        }",
      "        self.lines.push(line);",
      "    }",
      "    pub fn f(&self, i: usize, x: i64) -> i64 {",
      "        let line = self.lines[i];",
      "        line.0 * x + line.1",
      "    }",
      "    ///lower: l>=r, upper: l<=r",
      "    fn get<F: Fn(i64, i64) -> bool>(&self, x: i64, comp: F) -> Line {",
      "        let mut low: i64 = -1;",
      "        let mut high: i64 = (self.lines.len() - 1) as i64;",
      "        while high - low > 1 {",
      "            let mid = (high + low) / 2;",
      "            if comp(self.f(mid as usize, x), self.f((mid + 1) as usize, x)) {",
      "                low = mid;",
      "            } else {",
      "                high = mid;",
      "            }",
      "        }",
      "        let (a, b) = self.lines[high as usize];",
      "        Line { a: a, b: b }",
      "    }",
      "    pub fn get_upper(&self, x: i64) -> Line {",
      "        self.get(x, |l, r| l <= r)",
      "    }",
      "    pub fn get_lower(&self, x: i64) -> Line {",
      "        self.get(x, |l, r| l >= r)",
      "    }",
      "}"
    ]
  },
  "CoordCompression": {
    "prefix": "CoordCompression",
    "body": [
      "pub struct CoordCompression {",
      "    comp: std::collections::HashMap<i64, usize>,",
      "    dcmp: std::collections::HashMap<usize, i64>,",
      "}",
      "impl CoordCompression {",
      "    pub fn new(xs: &[i64], start: usize, step: usize) -> CoordCompression {",
      "        let mut xs = xs.to_owned();",
      "        xs.sort();",
      "        let mut comp = std::collections::HashMap::new();",
      "        let mut dcmp = std::collections::HashMap::new();",
      "        let mut acc = start;",
      "        for x in xs {",
      "            if comp.contains_key(&x) {",
      "                continue;",
      "            }",
      "            comp.insert(x, acc);",
      "            dcmp.insert(acc, x);",
      "            acc += step;",
      "        }",
      "        CoordCompression {",
      "            comp: comp,",
      "            dcmp: dcmp,",
      "        }",
      "    }",
      "    pub fn compress(&self, x: i64) -> usize {",
      "        *self.comp.get(&x).unwrap()",
      "    }",
      "    pub fn decompress(&self, x: usize) -> i64 {",
      "        *self.dcmp.get(&x).unwrap()",
      "    }",
      "    pub fn n(&self) -> usize {",
      "        self.comp.len()",
      "    }",
      "}"
    ]
  },
  "Edge": {
    "prefix": "Edge",
    "body": [
      "#[derive(Clone, Copy, Debug)]",
      "struct Edge {",
      "    to: usize,",
      "    cap: i64,",
      "    rev: usize,",
      "}"
    ]
  },
  "LexicalPermutation": {
    "prefix": "LexicalPermutation",
    "body": [
      "pub trait LexicalPermutation {",
      "    fn next_permutation(&mut self) -> bool;",
      "    fn prev_permutation(&mut self) -> bool;",
      "}",
      "impl<T> LexicalPermutation for [T]",
      "where",
      "    T: Ord,",
      "{",
      "    fn next_permutation(&mut self) -> bool {",
      "        if self.len() < 2 {",
      "            return false;",
      "        }",
      "        let mut i = self.len() - 1;",
      "        while i > 0 && self[i - 1] >= self[i] {",
      "            i -= 1;",
      "        }",
      "        if i == 0 {",
      "            return false;",
      "        }",
      "        let mut j = self.len() - 1;",
      "        while j >= i && self[j] <= self[i - 1] {",
      "            j -= 1;",
      "        }",
      "        self.swap(j, i - 1);",
      "        self[i..].reverse();",
      "        true",
      "    }",
      "    fn prev_permutation(&mut self) -> bool {",
      "        if self.len() < 2 {",
      "            return false;",
      "        }",
      "        let mut i = self.len() - 1;",
      "        while i > 0 && self[i - 1] <= self[i] {",
      "            i -= 1;",
      "        }",
      "        if i == 0 {",
      "            return false;",
      "        }",
      "        self[i..].reverse();",
      "        let mut j = self.len() - 1;",
      "        while j >= i && self[j - 1] < self[i - 1] {",
      "            j -= 1;",
      "        }",
      "        self.swap(i - 1, j);",
      "        true",
      "    }",
      "}"
    ]
  },
  "SCC": {
    "prefix": "SCC",
    "body": [
      "pub struct SCC {",
      "    g: Vec<Vec<usize>>,",
      "    r_g: Vec<Vec<usize>>,",
      "    post_order: VecDeque<usize>,",
      "    used: Vec<bool>,",
      "    pub order: Vec<usize>,",
      "}",
      "impl SCC {",
      "    pub fn new(n: usize) -> Self {",
      "        Self {",
      "            g: vec![vec![]; n],",
      "            r_g: vec![vec![]; n],",
      "            post_order: VecDeque::new(),",
      "            used: vec![false; n],",
      "            order: vec![n; n],",
      "        }",
      "    }",
      "    pub fn add_edge(&mut self, u: usize, v: usize) {",
      "        self.g[u].push(v);",
      "        self.r_g[v].push(u);",
      "    }",
      "    fn dfs(&mut self, u: usize) {",
      "        self.used[u] = true;",
      "        for i in 0..self.g[u].len() {",
      "            let v = self.g[u][i];",
      "            if !self.used[v] {",
      "                self.dfs(v);",
      "            }",
      "        }",
      "        self.post_order.push_front(u);",
      "    }",
      "    fn rdfs(&mut self, u: usize, k: usize) {",
      "        self.used[u] = true;",
      "        self.order[u] = k;",
      "        for i in 0..self.r_g[u].len() {",
      "            let v = self.r_g[u][i];",
      "            if !self.used[v] {",
      "                self.rdfs(v, k);",
      "            }",
      "        }",
      "    }",
      "    pub fn build(&mut self) {",
      "        for v in 0..self.g.len() {",
      "            if !self.used[v] {",
      "                self.dfs(v);",
      "            }",
      "        }",
      "        self.used = vec![false; self.g.len()];",
      "        let mut k = 0;",
      "        for i in 0..self.post_order.len() {",
      "            let v = self.post_order[i];",
      "            if !self.used[v] {",
      "                self.rdfs(v, k);",
      "                k += 1;",
      "            }",
      "        }",
      "    }",
      "}"
    ]
  },
  "SEG_LAZY": {
    "prefix": "SEG_LAZY",
    "body": [
      "/// 遅延セグ木",
      "/// 範囲updateをサポートする。",
      "/// update時には作用素のみをノードに載せるのみにとどめ、",
      "/// query時にあるノードの作用素の値が必要になった時に作用素を伝搬する。",
      "/// この回数がたかだかO(logN)しかない。",
      "/// 計算量:",
      "/// update l r f: O(logN)",
      "/// query l r: O(logN)",
      "trait SEGLazyImpl {",
      "    type Monoid: Copy;",
      "    type F: Copy + PartialEq;",
      "    fn e() -> Self::Monoid;",
      "    fn id() -> Self::F;",
      "    /// x `op` y",
      "    fn op(x: Self::Monoid, y: Self::Monoid) -> Self::Monoid;",
      "    /// f(x)",
      "    fn ap(f: Self::F, x: Self::Monoid) -> Self::Monoid;",
      "    /// f . g",
      "    /// f: 更新時上から来る値",
      "    /// g: 更新時の今の値",
      "    fn compose(f: Self::F, g: Self::F) -> Self::F;",
      "}",
      "struct SEGLazy<T: SEGLazyImpl> {",
      "    n: usize,",
      "    data: Vec<T::Monoid>,",
      "    lazy: Vec<T::F>,",
      "}",
      "impl<T: SEGLazyImpl> SEGLazy<T> {",
      "    pub fn new(n: usize, init: T::Monoid) -> Self {",
      "        let mut m = 1;",
      "        while m < n {",
      "            m *= 2;",
      "        }",
      "        SEGLazy {",
      "            n: m,",
      "            data: vec![init; m * 2],",
      "            lazy: vec![T::id(); m * 2],",
      "        }",
      "    }",
      "    fn propagate(&mut self, k: usize) {",
      "        if self.lazy[k] != T::id() {",
      "            if k < self.n {",
      "                self.lazy[2 * k + 0] = T::compose(self.lazy[k], self.lazy[2 * k + 0]);",
      "                self.lazy[2 * k + 1] = T::compose(self.lazy[k], self.lazy[2 * k + 1]);",
      "            }",
      "            self.data[k] = T::ap(self.lazy[k], self.data[k]);",
      "            self.lazy[k] = T::id();",
      "        }",
      "    }",
      "    fn do_update(",
      "        &mut self,",
      "        a: usize,",
      "        b: usize,",
      "        x: T::F,",
      "        k: usize,",
      "        l: usize,",
      "        r: usize,",
      "    ) -> T::Monoid {",
      "        self.propagate(k);",
      "        if r <= a || b <= l {",
      "            self.data[k]",
      "        } else if a <= l && r <= b {",
      "            self.lazy[k] = T::compose(x, self.lazy[k]);",
      "            self.propagate(k);",
      "            self.data[k]",
      "        } else {",
      "            self.data[k] = T::op(",
      "                self.do_update(a, b, x, 2 * k + 0, l, (l + r) >> 1),",
      "                self.do_update(a, b, x, 2 * k + 1, (l + r) >> 1, r),",
      "            );",
      "            self.data[k]",
      "        }",
      "    }",
      "    ///[l,r)",
      "    pub fn update(&mut self, l: usize, r: usize, x: T::F) -> T::Monoid {",
      "        let n = self.n;",
      "        self.do_update(l, r, x, 1, 0, n)",
      "    }",
      "    fn do_query(&mut self, a: usize, b: usize, k: usize, l: usize, r: usize) -> T::Monoid {",
      "        self.propagate(k);",
      "        if r <= a || b <= l {",
      "            T::e()",
      "        } else if a <= l && r <= b {",
      "            self.data[k]",
      "        } else {",
      "            T::op(",
      "                self.do_query(a, b, 2 * k + 0, l, (l + r) >> 1),",
      "                self.do_query(a, b, 2 * k + 1, (l + r) >> 1, r),",
      "            )",
      "        }",
      "    }",
      "    ///[l,r)",
      "    pub fn query(&mut self, l: usize, r: usize) -> T::Monoid {",
      "        let n = self.n;",
      "        self.do_query(l, r, 1, 0, n)",
      "    }",
      "}"
    ]
  },
  "SEG_LAZY_MAX_RAQ": {
    "prefix": "SEG_LAZY_MAX_RAQ",
    "body": [
      "struct MAX_RAQ;",
      "impl SEGLazyImpl for MAX_RAQ {",
      "    type Monoid = i64;",
      "    type F = i64;",
      "    fn e() -> Self::Monoid {",
      "        std::i64::MIN",
      "    }",
      "    fn id() -> Self::F {",
      "        0",
      "    }",
      "    fn op(x: Self::Monoid, y: Self::Monoid) -> Self::Monoid {",
      "        std::cmp::max(x, y)",
      "    }",
      "    fn ap(f: Self::F, x: Self::Monoid) -> Self::Monoid {",
      "        x + f",
      "    }",
      "    fn compose(f: Self::F, g: Self::F) -> Self::F {",
      "        g + f",
      "    }",
      "}"
    ]
  },
  "SEG_LAZY_MAX_RUQ": {
    "prefix": "SEG_LAZY_MAX_RUQ",
    "body": [
      "struct MAX_RUQ;",
      "impl SEGLazyImpl for MAX_RUQ {",
      "    type Monoid = i64;",
      "    type F = i64;",
      "    fn e() -> Self::Monoid {",
      "        0",
      "    }",
      "    fn id() -> Self::F {",
      "        0",
      "    }",
      "    fn op(x: Self::Monoid, y: Self::Monoid) -> Self::Monoid {",
      "        std::cmp::max(x, y)",
      "    }",
      "    fn ap(f: Self::F, x: Self::Monoid) -> Self::Monoid {",
      "        f",
      "    }",
      "    fn compose(f: Self::F, g: Self::F) -> Self::F {",
      "        f",
      "    }",
      "}"
    ]
  },
  "SEG_LAZY_MIN_RAQ": {
    "prefix": "SEG_LAZY_MIN_RAQ",
    "body": [
      "struct MIN_RAQ;",
      "impl SEGLazyImpl for MIN_RAQ {",
      "    type Monoid = i64;",
      "    type F = i64;",
      "    fn e() -> Self::Monoid {",
      "        std::i64::MAX",
      "    }",
      "    fn id() -> Self::F {",
      "        0",
      "    }",
      "    fn op(x: Self::Monoid, y: Self::Monoid) -> Self::Monoid {",
      "        std::cmp::min(x, y)",
      "    }",
      "    fn ap(f: Self::F, x: Self::Monoid) -> Self::Monoid {",
      "        x + f",
      "    }",
      "    fn compose(f: Self::F, g: Self::F) -> Self::F {",
      "        g + f",
      "    }",
      "}"
    ]
  },
  "SEG_LAZY_MIN_RUQ": {
    "prefix": "SEG_LAZY_MIN_RUQ",
    "body": [
      "struct MIN_RUQ;",
      "impl SEGLazyImpl for MIN_RUQ {",
      "    type Monoid = i64;",
      "    type F = i64;",
      "    fn e() -> Self::Monoid {",
      "        std::i64::MAX",
      "    }",
      "    fn id() -> Self::F {",
      "        std::i64::MAX",
      "    }",
      "    fn op(x: Self::Monoid, y: Self::Monoid) -> Self::Monoid {",
      "        std::cmp::min(x, y)",
      "    }",
      "    fn ap(f: Self::F, x: Self::Monoid) -> Self::Monoid {",
      "        f",
      "    }",
      "    fn compose(f: Self::F, g: Self::F) -> Self::F {",
      "        f",
      "    }",
      "}"
    ]
  },
  "SparseTable": {
    "prefix": "SparseTable",
    "body": [
      "/// 範囲[l,r)の中の最小値のインデックスを求める",
      "/// 構築 O(N logN)",
      "/// クエリ O(1)",
      "pub struct SparseTable {",
      "    data: Vec<i64>,",
      "    log_table: Vec<usize>,",
      "    table: Vec<Vec<usize>>,",
      "}",
      "impl SparseTable {",
      "    pub fn new(data: Vec<i64>) -> Self {",
      "        let n = data.len();",
      "        let mut log_table = vec![0; n + 1];",
      "        for i in 2..n + 1 {",
      "            log_table[i] = log_table[i >> 1] + 1;",
      "        }",
      "        let mut table = vec![vec![n; n]; log_table[n] + 1];",
      "        for i in 0..n {",
      "            table[0][i] = i;",
      "        }",
      "        for k in 1..table.len() {",
      "            let half_jmp = 1 << (k - 1);",
      "            for i in 0..n {",
      "                let first = table[k - 1][i];",
      "                table[k][i] = first;",
      "                if i + half_jmp < n {",
      "                    let second = table[k - 1][i + half_jmp];",
      "                    assert!(first < n);",
      "                    assert!(second < n);",
      "                    if data[first] <= data[second] {",
      "                        table[k][i] = first;",
      "                    } else {",
      "                        table[k][i] = second;",
      "                    }",
      "                }",
      "            }",
      "        }",
      "        Self {",
      "            data,",
      "            log_table,",
      "            table,",
      "        }",
      "    }",
      "    /// [a, b)",
      "    pub fn query(&self, a: usize, b: usize) -> usize {",
      "        let d = b - a;",
      "        let k = self.log_table[d];",
      "        let first = self.table[k][a];",
      "        let second = self.table[k][b - (1 << k)];",
      "        if self.data[first] <= self.data[second] {",
      "            first",
      "        } else {",
      "            second",
      "        }",
      "    }",
      "}"
    ]
  },
  "SymmetricGroup": {
    "prefix": "SymmetricGroup",
    "body": [
      "#[derive(Debug, Clone, PartialEq)]",
      "pub struct SymmetricGroup {",
      "    n: usize,",
      "    g: Vec<usize>,",
      "}"
    ]
  },
  "TranspositionGroup": {
    "prefix": "TranspositionGroup",
    "body": [
      "/// 対称群の作用を互換に制限したもの",
      "/// (i,j) * σ、σ * (i,j)　の計算量 O(1)",
      "#[derive(Debug, Clone, PartialEq)]",
      "pub struct TranspositionGroup {",
      "    n: usize,",
      "    g: Vec<usize>,",
      "    inv_g: Vec<usize>,",
      "}"
    ]
  },
  "UnionFind": {
    "prefix": "UnionFind",
    "body": [
      "pub struct UnionFind {",
      "    par: Vec<usize>,",
      "    siz: Vec<usize>,",
      "}",
      "impl UnionFind {",
      "    pub fn new(n: usize) -> Self {",
      "        UnionFind {",
      "            par: (0..n).collect::<Vec<usize>>(),",
      "            siz: vec![1; n],",
      "        }",
      "    }",
      "    pub fn unite(&mut self, x: usize, y: usize) -> bool {",
      "        let root_x = self.root(x);",
      "        let root_y = self.root(y);",
      "        if root_x == root_y {",
      "            return false;",
      "        }",
      "        if self.siz[root_x] < self.siz[root_y] {",
      "            self.par[root_x] = root_y;",
      "            self.siz[root_y] += self.siz[root_x];",
      "        } else {",
      "            self.par[root_y] = root_x;",
      "            self.siz[root_x] += self.siz[root_y];",
      "        }",
      "        true",
      "    }",
      "    pub fn issame(&mut self, x: usize, y: usize) -> bool {",
      "        self.root(x) == self.root(y)",
      "    }",
      "    pub fn root(&mut self, x: usize) -> usize {",
      "        if self.par[x] == x {",
      "            return x;",
      "        } else {",
      "            self.par[x] = self.root(self.par[x]);",
      "            return self.par[x];",
      "        }",
      "    }",
      "    pub fn size(&mut self, x: usize) -> usize {",
      "        let root = self.root(x);",
      "        self.siz[root]",
      "    }",
      "}"
    ]
  },
  "combination": {
    "prefix": "combination",
    "body": [
      "fn combination(n: usize, r: usize) -> usize {",
      "    if n < r {",
      "        return 0;",
      "    }",
      "    if r == 0 {",
      "        return 1;",
      "    }",
      "    let mut res = 1;",
      "    for i in 0..r {",
      "        res *= n - i;",
      "        res %= MOD;",
      "    }",
      "    let mut dev = 1;",
      "    for i in 1..=r {",
      "        dev *= i;",
      "        dev %= MOD;",
      "    }",
      "    (res * pow(dev, MOD - 2)) % MOD",
      "}"
    ]
  },
  "divisor": {
    "prefix": "divisor",
    "body": [
      "fn divisor(n: usize) -> Vec<usize> {",
      "    let mut res: Vec<usize> = Vec::new();",
      "    let mut i = 1;",
      "    while i * i <= n {",
      "        if n % i == 0 {",
      "            res.push(i);",
      "            if i != n / i {",
      "                res.push(n / i);",
      "            }",
      "        }",
      "        i += 1;",
      "    }",
      "    res",
      "}"
    ]
  },
  "extgcd": {
    "prefix": "extgcd",
    "body": [
      "fn extgcd1(a: i64, b: i64) -> (i64, i64, i64) {",
      "    if b > 0 {",
      "        let (d, mut y, x) = extgcd1(b, a % b);",
      "        y -= (a / b) * x;",
      "        (d, x, y)",
      "    } else {",
      "        (a, 1, 0)",
      "    }",
      "}",
      "fn extgcd2(a: i64, b: i64, x: &mut i64, y: &mut i64) -> i64 {",
      "    let mut d = a;",
      "    if b != 0 {",
      "        d = extgcd2(b, a % b, y, x);",
      "        *y -= (a / b) * (*x);",
      "    } else {",
      "        *x = 1;",
      "        *y = 0;",
      "    }",
      "    d",
      "}"
    ]
  },
  "factors": {
    "prefix": "factors",
    "body": [
      "fn factors(x: usize) -> Vec<usize> {",
      "    if x <= 1 {",
      "        return vec![];",
      "    };",
      "    let mut lst: Vec<usize> = Vec::new();",
      "    let mut curn = x;",
      "    loop {",
      "        let m = firstfac(curn);",
      "        lst.push(m);",
      "        if m == curn {",
      "            break;",
      "        } else {",
      "            curn /= m",
      "        };",
      "    }",
      "    lst",
      "}"
    ]
  },
  "firstfac": {
    "prefix": "firstfac",
    "body": [
      "fn firstfac(x: usize) -> usize {",
      "    if x % 2 == 0 {",
      "        return 2;",
      "    };",
      "    for n in (1..).map(|m| 2 * m + 1).take_while(|m| m * m <= x) {",
      "        if x % n == 0 {",
      "            return n;",
      "        };",
      "    }",
      "    x",
      "}"
    ]
  },
  "gcd": {
    "prefix": "gcd",
    "body": [
      "fn gcd(a: i64, b: i64) -> i64 {",
      "    if b == 0 {",
      "        a",
      "    } else {",
      "        gcd(b, a % b)",
      "    }",
      "}"
    ]
  },
  "is_prime": {
    "prefix": "is_prime",
    "body": [
      "fn is_prime(n: usize) -> bool {",
      "    if n <= 1 {",
      "        return false;",
      "    }",
      "    firstfac(n) == n",
      "}"
    ]
  },
  "lcd": {
    "prefix": "lcd",
    "body": [
      "fn lcm(a: i64, b: i64) -> i64 {",
      "    a * b / gcd(a, b)",
      "}"
    ]
  },
  "modinv": {
    "prefix": "modinv",
    "body": [
      "fn modinv(mut a: i64, modulo: i64) -> i64 {",
      "    let mut b = modulo;",
      "    let mut u = 1;",
      "    let mut v = 0;",
      "    while b > 0 {",
      "        let t = a / b;",
      "        a -= t * b;",
      "        std::mem::swap(&mut a, &mut b);",
      "        u -= t * v;",
      "        std::mem::swap(&mut u, &mut v);",
      "    }",
      "    u %= modulo;",
      "    if u < 0 {",
      "        u += modulo;",
      "    }",
      "    u",
      "}"
    ]
  },
  "pow": {
    "prefix": "pow",
    "body": [
      "fn pow(x: usize, n: usize) -> usize {",
      "    let mut ret = 1;",
      "    let mut m = n;",
      "    let mut y = x;",
      "    while m > 0 {",
      "        if 1 & m == 1 {",
      "            ret *= y;",
      "            ret %= 1_000_000_007;",
      "        }",
      "        y *= y;",
      "        m /= 2;",
      "    }",
      "    ret",
      "}"
    ]
  },
  "prime": {
    "prefix": "prime",
    "body": [
      "fn factors(x: usize) -> Vec<usize> {",
      "    if x <= 1 {",
      "        return vec![];",
      "    };",
      "    let mut lst: Vec<usize> = Vec::new();",
      "    let mut curn = x;",
      "    loop {",
      "        let m = firstfac(curn);",
      "        lst.push(m);",
      "        if m == curn {",
      "            break;",
      "        } else {",
      "            curn /= m",
      "        };",
      "    }",
      "    lst",
      "}",
      "fn firstfac(x: usize) -> usize {",
      "    if x % 2 == 0 {",
      "        return 2;",
      "    };",
      "    for n in (1..).map(|m| 2 * m + 1).take_while(|m| m * m <= x) {",
      "        if x % n == 0 {",
      "            return n;",
      "        };",
      "    }",
      "    x",
      "}",
      "fn is_prime(n: usize) -> bool {",
      "    if n <= 1 {",
      "        return false;",
      "    }",
      "    firstfac(n) == n",
      "}"
    ]
  },
  "sieve": {
    "prefix": "sieve",
    "body": [
      "fn sieve(n: usize) -> usize {",
      "    let mut is_prime = vec![true; n + 1];",
      "    let mut p_count = 0;",
      "    is_prime[0] = false;",
      "    is_prime[1] = false;",
      "    for i in 2..=n {",
      "        if is_prime[i] {",
      "            for j in 2..=n / i {",
      "                is_prime[i * j] = false;",
      "            }",
      "            p_count += 1;",
      "        }",
      "    }",
      "    p_count",
      "}"
    ]
  },
  "solve_bsgs": {
    "prefix": "solve_bsgs",
    "body": [
      "/// a^x = b (mod m)",
      "/// を解く。",
      "/// 計算量: O(root M)",
      "pub fn solve_bsgs<M: BSGSable>(a: M::T, b: M::T, mo: u64) -> Option<u64> {",
      "    let mut r = 1;",
      "    while r * r < mo {",
      "        r += 1;",
      "    }",
      "    let mut baby_step = vec![];",
      "    baby_step.push(M::unit());",
      "    for j in 1..r {",
      "        let prev = &baby_step[j as usize - 1];",
      "        let next = M::multiply(prev, &a, mo);",
      "        baby_step.push(next);",
      "    }",
      "    let mut baby_step_k2j = HashMap::new();",
      "    for j in 0..r {",
      "        let x = &baby_step[j as usize];",
      "        let k = M::unique_key_for(x);",
      "        baby_step_k2j.insert(k, j);",
      "    }",
      "    let mut giant_step = vec![];",
      "    let a_inv = M::inv(&a, mo);",
      "    let mut a_inv_pow_r = M::unit();",
      "    for _ in 0..r {",
      "        a_inv_pow_r = M::multiply(&a_inv_pow_r, &a_inv, mo);",
      "    }",
      "    giant_step.push(M::unit());",
      "    for i in 1..r {",
      "        let prev = &giant_step[i as usize - 1];",
      "        let next = M::multiply(&prev, &a_inv_pow_r, mo);",
      "        giant_step.push(next);",
      "    }",
      "    for i in 0..r {",
      "        let gs = &giant_step[i as usize];",
      "        let tgt = M::multiply(&b, &gs, mo);",
      "        let key = M::unique_key_for(&tgt);",
      "        if let Some(j) = baby_step_k2j.get(&key) {",
      "            return Some(i * r + j);",
      "        }",
      "    }",
      "    return None;",
      "}"
    ]
  },
  "ternary_search": {
    "prefix": "ternary_search",
    "body": [
      "///f(x) should be upper convex function in [l,r]. find x where f(x) is the max in the range.",
      "fn ternary_search<F: Fn(f64) -> f64>(f: F, l: f64, r: f64) -> f64 {",
      "    let mut l = l;",
      "    let mut r = r;",
      "    let eps = 1e-9;",
      "    while r - l > eps {",
      "        let m1 = (2.0 * l + r) / 3.0;",
      "        let m2 = (l + 2.0 * r) / 3.0;",
      "        let f1 = f(m1);",
      "        let f2 = f(m2);",
      "        if f1 < f2 {",
      "            l = m1;",
      "        } else {",
      "            r = m2;",
      "        }",
      "    }",
      "    l",
      "}"
    ]
  }
}
